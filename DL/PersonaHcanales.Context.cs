//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Ejercicio13JunioEntities : DbContext
    {
        public Ejercicio13JunioEntities()
            : base("name=Ejercicio13JunioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Persona> Personas { get; set; }
        public virtual DbSet<Banco> Bancoes { get; set; }
        public virtual DbSet<Cuenta> Cuentas { get; set; }
    
        public virtual ObjectResult<GetAllPersona_Result> GetAllPersona()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPersona_Result>("GetAllPersona");
        }
    
        public virtual int AddPersonas(string nombre, string apellidoPaterno, string apellidoMaterno, Nullable<System.DateTime> fechaNacimiento, string paisOrigen, string sexo, string cURP, string rFC, string ocupacion, string tipoPersonaFisica)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var paisOrigenParameter = paisOrigen != null ?
                new ObjectParameter("PaisOrigen", paisOrigen) :
                new ObjectParameter("PaisOrigen", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var ocupacionParameter = ocupacion != null ?
                new ObjectParameter("Ocupacion", ocupacion) :
                new ObjectParameter("Ocupacion", typeof(string));
    
            var tipoPersonaFisicaParameter = tipoPersonaFisica != null ?
                new ObjectParameter("TipoPersonaFisica", tipoPersonaFisica) :
                new ObjectParameter("TipoPersonaFisica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPersonas", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, fechaNacimientoParameter, paisOrigenParameter, sexoParameter, cURPParameter, rFCParameter, ocupacionParameter, tipoPersonaFisicaParameter);
        }
    
        public virtual int DeletePersonas(Nullable<int> idPersona, string nombre, string apellidoPaterno, string apellidoMaterno, Nullable<System.DateTime> fechaNacimiento, string paisOrigen, string sexo, string cURP, string rFC, string ocupacion, string tipoPersonaFisica)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var paisOrigenParameter = paisOrigen != null ?
                new ObjectParameter("PaisOrigen", paisOrigen) :
                new ObjectParameter("PaisOrigen", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var ocupacionParameter = ocupacion != null ?
                new ObjectParameter("Ocupacion", ocupacion) :
                new ObjectParameter("Ocupacion", typeof(string));
    
            var tipoPersonaFisicaParameter = tipoPersonaFisica != null ?
                new ObjectParameter("TipoPersonaFisica", tipoPersonaFisica) :
                new ObjectParameter("TipoPersonaFisica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePersonas", idPersonaParameter, nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, fechaNacimientoParameter, paisOrigenParameter, sexoParameter, cURPParameter, rFCParameter, ocupacionParameter, tipoPersonaFisicaParameter);
        }
    
        public virtual ObjectResult<GetByIdPersona_Result> GetByIdPersona(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetByIdPersona_Result>("GetByIdPersona", idPersonaParameter);
        }
    
        public virtual ObjectResult<GetByIdPersonas_Result> GetByIdPersonas(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetByIdPersonas_Result>("GetByIdPersonas", idPersonaParameter);
        }
    
        public virtual int UpdatePersona(Nullable<int> idPersona, string nombre, string apellidoPaterno, string apellidoMaterno, Nullable<System.DateTime> fechaNacimiento, string paisOrigen, string sexo, string cURP, string rFC, string ocupacion, string tipoPersonaFisica)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var paisOrigenParameter = paisOrigen != null ?
                new ObjectParameter("PaisOrigen", paisOrigen) :
                new ObjectParameter("PaisOrigen", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var ocupacionParameter = ocupacion != null ?
                new ObjectParameter("Ocupacion", ocupacion) :
                new ObjectParameter("Ocupacion", typeof(string));
    
            var tipoPersonaFisicaParameter = tipoPersonaFisica != null ?
                new ObjectParameter("TipoPersonaFisica", tipoPersonaFisica) :
                new ObjectParameter("TipoPersonaFisica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePersona", idPersonaParameter, nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, fechaNacimientoParameter, paisOrigenParameter, sexoParameter, cURPParameter, rFCParameter, ocupacionParameter, tipoPersonaFisicaParameter);
        }
    
        public virtual int AddCuenta(string numeroCuenta, Nullable<int> idBanco, Nullable<int> idPersona)
        {
            var numeroCuentaParameter = numeroCuenta != null ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(string));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCuenta", numeroCuentaParameter, idBancoParameter, idPersonaParameter);
        }
    
        public virtual ObjectResult<GetAllCuentas_Result> GetAllCuentas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCuentas_Result>("GetAllCuentas");
        }
    
        public virtual int DeleteCuenta(Nullable<int> idCuenta)
        {
            var idCuentaParameter = idCuenta.HasValue ?
                new ObjectParameter("IdCuenta", idCuenta) :
                new ObjectParameter("IdCuenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCuenta", idCuentaParameter);
        }
    }
}
